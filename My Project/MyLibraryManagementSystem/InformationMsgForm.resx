<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFI/NTVxWESXg2ROt4Nk
        TrdyWEaWU0A2NAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVQAAA2hQQZadel3xuI5r/7qQ
        bP+6kGz/uI5r/515XPFnTz6UVQAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGROP5aqg2P+yZtz/9Gh
        eP/RoXj/0aF4/9GheP/Im3T/qoNj/mVPP5IAAAAAAAAAAAAAAAAAAAAAAAAAAE07MjiceVzxy5x0/9Gh
        eP++lnb/uLCk/7ivo/++lnb/0aF4/8qbdP+ceVvvTTowNQAAAAAAAAAAAAAAAAAAAABwVkOUtotp/9Gh
        eP/RoXj/0aF4/8S1pv/EtKX/0aF4/9GheP/RoXj/totp/3BWRJIAAAAAAAAAAAAAAAAAAAAAhWZPsreN
        av/RoXj/0aF4/9GheP/Etab/xLSl/9GheP/RoXj/0aF4/7eNav+EZ06wAAAAAAAAAAAAAAAAAAAAAIZm
        T7G2jGr/0aF4/9GheP+/mnr/trOr/7ipmP/RoXj/0aF4/9GheP+3jWr/hGdOsAAAAAAAAAAAAAAAAAAA
        AABwVkOUtoxq/9GheP/RoXj/z592/7aZgP+9nIH/0aF4/9GheP/RoXj/toxq/3BWRJIAAAAAAAAAAAAA
        AAAAAAAATTsyOJ15XPPLnHT/0aF4/9GheP++q5b/vqaQ/9GheP/RoXj/y5x0/5t4W/JMPTQ2AAAAAAAA
        AAAAAAAAAAAAAAAAAABoUkCbqoNj/smbc//RoXj/0aF4/9GheP/RoXj/zJ52/7GJZv5pT0CXAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAVQAAA2hQQZadel3xuI5r/7qQbP+0i2j/vZFt/6R8YPBnTz6UVQAAAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUj81NXpgSZCJaVGziWlRs3tfSY9TQDY0AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA/D8AAPAPAADgBwAA4AcAAMADAADAAwAAwAMAAMAD
        AADgBwAA4AcAAPAPAAD8PwAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVAAADKiEdPTMpJGRAMSuDQDErgzMpJGQrIh48VQAAAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsIyMdQjMrq088MtyAYkzvon1f/7aLaf+2i2n/oXxf/4Bi
        TO9PPDLcQjIsqi4kGxwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQjMrkF5IO+K6j2v/poBh/515Xf+kfmD/pH9g/6R/
        YP+kfmD/nXld/6aAYf+5j2v/Xkc64kIyK44AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALhcXCz4vKbqZdVrxrIVl/5JwV//AlG//0aF4/9Gh
        eP/RoXj/0aF4/9GheP/RoXj/wJNu/5FxVv+thWX/mHVZ8D4vKbkuFxcLAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBMiu8r4dl/Jl1Wv+0i2j/0aF4/9Gh
        eP/RoXj/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/7KJaP+YdFr/roZl+0EyK7kAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQDMqi5l3W/OYdFr/wJNu/9Gh
        eP/RoXj/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/76Tbv+YdFr/mHVa8kIx
        K4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4jIxZcRzngrIRk/7OK
        aP/RoXj/0aF4/9GheP/RoXj/qo11/66fjf+un43/rp+N/66fjf+qjnb/0aF4/9GheP/RoXj/0aF4/7KJ
        Z/+shWX/WkY43zEkJBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARDQsrLqQ
        bP+Wc1j/0aF4/9GheP/RoXj/0aF4/9GheP+rjHP/mo6D/+z5+v/r+fn/l4qA/6uMc//RoXj/0aF4/9Gh
        eP/RoXj/0aF4/5V0WP+5j2v/QjUtqQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAJPPjPbqYJi/8CUb//RoXj/0aF4/9GheP/RoXj/0aF4/9GheP+rh2v/3+vs/93o6f+siWv/0aF4/9Gh
        eP/RoXj/0aF4/9GheP/RoXj/v5Nu/6uEY/9QPjPZAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKSAgOIJlTu+Zdlr/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/6uHa//f6+z/3ejp/6yJ
        a//RoXj/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/mXZa/4FjTO4rIh01AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA3KyZmpH5g/5x4W//RoXj/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/q4dr/9/r
        7P/d6On/rIlr/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/9GheP+ceFv/on1f/zQqJGIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEM0K421jGn/nHhb/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/9Gh
        eP+rh2v/3+vs/93o6f+siWv/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/5x4W/+0i2j/QjUujAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQjUujLWMaf+deFz/0aF4/9GheP/RoXj/0aF4/9Gh
        eP/RoXj/x5pz/5J7af/o9PX/3ejp/6yJa//RoXj/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/nHhb/7SL
        aP9CMiqLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5KihnpH9g/5x4XP/RoXj/0aF4/9Gh
        eP/RoXj/0aF4/9GheP+SgHD/sbKu/7e4tP+qqqf/rolr/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/9Gh
        eP+ceFv/o31g/zgpJGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkgIDiCZU7vnHhc/9Gh
        eP/RoXj/0aF4/9GheP/RoXj/0aF4/8yedv/GmHL/v5Nu/8GUb//QoHj/0aF4/9GheP/RoXj/0aF4/9Gh
        eP/RoXj/0aF4/5l2Wv+BY0zuKyIdNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAABFI+
        NN2rhGP/xJdx/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/6+Oc/+ytK//qKWf/7qTcP/RoXj/0aF4/9Gh
        eP/RoXj/0aF4/9GheP/Ak27/q4Rj/1A/NNxVAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAARDUsrLmPbP+ZdVr/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/n4x5/+78/f/o9fb/ooVt/9Gh
        eP/RoXj/0aF4/9GheP/RoXj/0aF4/5VyV/+4jmr/RDUtqQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAApISEfYks95qyFZf+zimj/0aF4/9GheP/RoXj/0aF4/9GheP/FmHL/ppOC/6aQ
        fP/Pn3b/0aF4/9GheP/RoXj/0aF4/9GheP+0i2j/rYVl/19JO+QrIiIeAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABENi+Om3dc9Zh0Wv/Ak27/0aF4/9GheP/RoXj/0aF4/9Gh
        eP/RoXj/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/vpNu/5l2Wv+Zd1r1RDMsiwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBMiu9r4dl/Jl1Wv+0i2j/0aF4/9Gh
        eP/RoXj/0aF4/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/7qQbP+3jmr/roZl+0EyLLsAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4XFwtDNCzBm3db96yF
        Zf+ScFf/wJRv/9GheP/RoXj/0aF4/9GheP/RoXj/0aF4/9GheP+mgGH/yJlz/5l2WvdEMizALhcXCwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAJCMyuQXkg74rqPa/+mgGH/nXld/6R+YP+kf2D/oXxf/5p3Wv+ceFv/u5Bs/7qQbP9eRzriQjIrjgAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAsIyMdQjMrq088MtyAYkzvon1f/7aLaf+2i2n/oXxf/4BiTO9PPDLcQjIsqi4k
        GxwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVQAAAyohHT0zKSRkQDErg0AxK4MzKSRkKyIePFUA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////n///+AH//+AAf//AAD//gAAf/wA
        AD/8AAA/+AAAH/gAAB/4AAAf+AAAH/AAAA/wAAAP+AAAH/gAAB/4AAAf+AAAH/wAAD/8AAA//gAAf/8A
        AP//gAH//+AH///+f///////////////////////
</value>
  </data>
</root>